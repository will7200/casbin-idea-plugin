package io.github.will7200.plugins.casbin.view.ui;

import com.intellij.icons.AllIcons;
import com.intellij.lang.Language;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.TextBrowseFolderListener;
import com.intellij.openapi.wm.ToolWindow;
import com.intellij.ui.EditorTextField;
import com.intellij.ui.JBSplitter;
import io.github.will7200.plugins.casbin.view.editors.CasbinCSVEditor;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.lang.reflect.Method;

public class CasbinExecutorToolWindow {
    private final Project myProject;
    private JPanel TopLevel;
    private JPanel MainView;
    public JPanel Settings;
    private PersistedTextFieldWithBrowseButton policyFile;
    private PersistedTextFieldWithBrowseButton modelDefinitionFile;
    public EditorTextField requestEditorPane;
    private JButton runTestButton;
    private JCheckBox runAsyncCheckBox;
    private JPanel Run;
    public JBSplitter LeftPane;
    private JBSplitter TopSplitter;
    private final Logger log = Logger.getInstance("CasbinExecutorToolWindow");

    public CasbinExecutorToolWindow(Project project, ToolWindow toolWindow) {
        myProject = project;
        $$$setupUI$$$();
        policyFile.addBrowseFolderListener(new TextBrowseFolderListener(new FileChooserDescriptor(true, false, false, false, false, false)));
        modelDefinitionFile.addBrowseFolderListener(new TextBrowseFolderListener(new FileChooserDescriptor(true, false, false, false, false, false)));
        policyFile.load(project, "policy_file");
        modelDefinitionFile.load(project, "model_def_file");
    }

    public JPanel getContent() {
        return TopLevel;
    }

    public PersistedTextFieldWithBrowseButton getPolicyFile() {
        return policyFile;
    }

    public PersistedTextFieldWithBrowseButton getModelDefinitionFile() {
        return modelDefinitionFile;
    }

    public String getPolicyFileText() {
        return policyFile.getText();
    }

    public String getModelDefinitionFileText() {
        return modelDefinitionFile.getText();
    }

    public JButton getRunTestButton() {
        return runTestButton;
    }

    public JCheckBox getRunAsyncCheckBox() {
        return runAsyncCheckBox;
    }

    private void createUIComponents() {
        requestEditorPane = new CasbinCSVEditor(Language.findLanguageByID("CasbinCSV"), myProject, "");
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        TopLevel = new JPanel();
        TopLevel.setLayout(new BorderLayout(0, 0));

        TopSplitter = new com.intellij.ui.JBSplitter("CasbinWindow.TopSplitter", .2f);
        TopLevel.add(TopSplitter, BorderLayout.CENTER);
        TopSplitter.setLayout(new BorderLayout(0, 0));
        TopSplitter.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));

        LeftPane = new com.intellij.ui.JBSplitter();
        LeftPane.setLayout(new BorderLayout(0, 0));
        TopSplitter.setFirstComponent(LeftPane);
        Settings = new JPanel();
        Settings.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, 10));
        LeftPane.setFirstComponent(Settings);
        LeftPane.setOrientation(true);
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.policyFileLabel.text"));
        label1.setToolTipText(this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.policyFileLabel.toolTipText"));
        Settings.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        policyFile = new io.github.will7200.plugins.casbin.view.ui.PersistedTextFieldWithBrowseButton();
        Settings.add(policyFile, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(130, 30), new Dimension(-1, 30), 0, false));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.widget.model.text"));
        label2.setToolTipText(this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.widget.modelLabel.toolTipText"));
        Settings.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modelDefinitionFile = new io.github.will7200.plugins.casbin.view.ui.PersistedTextFieldWithBrowseButton();
        Settings.add(modelDefinitionFile, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(130, 30), new Dimension(-1, 30), 0, false));
        runAsyncCheckBox = new JCheckBox();
        runAsyncCheckBox.setHideActionText(false);
        runAsyncCheckBox.setIcon(AllIcons.General.NotificationWarning);
        this.$$$loadButtonText$$$(runAsyncCheckBox, this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.widget.runAsyncButton.text"));
        runAsyncCheckBox.setToolTipText(this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.widget.runAsyncButton.toolTipText"));
        Settings.add(runAsyncCheckBox, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(130, 24), null, 1, false));
        Run = new JPanel();
        Run.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 10, 0), -1, -1));
        LeftPane.setSecondComponent(Run);
        runTestButton = new JButton();
        this.$$$loadButtonText$$$(runTestButton, this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.widget.runTestButton.text"));
        runTestButton.setToolTipText(this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.widget.runTestButton.toolTipText"));
        Run.add(runTestButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(79, 33), null, 1, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        Run.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        MainView = new JPanel();
        MainView.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        TopSplitter.setSecondComponent(MainView);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setAutoscrolls(false);
        panel1.setOpaque(true);
        panel1.setVisible(true);
        MainView.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, this.$$$getMessageFromBundle$$$("messages/CasbinBundle", "casbin.editor.mainView.title"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panel1.add(requestEditorPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));

    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        return "yes";
//        ResourceBundle bundle;
//        try {
//            Class<?> thisClass = this.getClass();
//            if ($$$cachedGetBundleMethod$$$ == null) {
//                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
//                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
//            }
//            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
//        } catch (Exception e) {
//            bundle = ResourceBundle.getBundle(path);
//        }
//        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return TopLevel;
    }
}
