/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.github.will7200.plugins.casbincsv.language.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.will7200.plugins.casbincsv.language.psi.CasbinCSVElementTypes;

import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>CasbinCSVLexer.flex</tt>
 */
public class _CasbinCSVLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AFTER_TEXT = 2;
  public static final int ESCAPED_TEXT = 4;
  public static final int UNESCAPED_TEXT = 6;
  public static final int ESCAPING = 8;
  public static final int JSON = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
    "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
    "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\6\1\7\1\11\1\12\1\13\4\0\1\14"+
    "\1\15\1\14\2\7\1\16\3\7\1\16\71\7\1\17\1\7\1\20\1\0\1\21\1\22\2\0\10\23\1"+
    "\24\5\23\1\25\1\26\1\27\1\30\2\7\1\31\11\7\1\32\21\7\1\33\1\34\24\7\1\6\3"+
    "\7\1\16\1\35\1\6\4\7\1\0\1\36\3\23\1\7\1\32\1\37\1\0\3\7\2\40\3\0\1\7\1\40"+
    "\7\7\1\41\1\4\1\42\14\7\1\43\1\44\1\41\1\45\1\4\1\46\2\0\6\7\1\23\1\47\14"+
    "\7\1\20\1\0\1\4\1\50\3\7\1\51\1\52\1\14\3\7\1\34\1\7\1\53\2\0\3\7\1\54\10"+
    "\0\2\7\1\25\1\55\2\0\1\56\1\7\1\57\1\60\11\7\1\61\1\7\1\62\1\63\1\7\1\64\1"+
    "\4\1\6\1\7\1\43\1\65\1\66\2\7\1\67\1\70\1\71\1\65\1\72\1\73\1\74\1\64\1\4"+
    "\1\20\1\0\1\75\1\76\1\66\2\7\1\67\1\77\1\100\1\76\1\101\1\35\1\102\1\103\1"+
    "\4\1\55\1\0\1\75\1\32\1\31\2\7\1\67\1\104\1\71\1\32\1\105\1\106\1\0\1\64\1"+
    "\4\1\0\1\35\1\75\1\65\1\66\2\7\1\67\1\104\1\71\1\65\1\101\1\107\1\74\1\64"+
    "\1\4\1\35\1\0\1\110\1\111\1\112\1\113\1\114\1\111\1\7\1\17\1\111\1\115\1\116"+
    "\1\0\1\103\1\4\2\0\1\43\1\25\1\67\2\7\1\67\1\7\1\117\1\25\1\115\1\120\1\40"+
    "\1\64\1\4\2\0\1\43\1\25\1\67\2\7\1\67\1\43\1\71\1\25\1\115\1\120\1\27\1\64"+
    "\1\4\1\121\1\0\1\75\1\25\1\67\4\7\1\122\1\25\1\123\1\56\1\73\1\64\1\4\1\0"+
    "\1\124\1\110\1\7\1\16\1\124\2\7\1\31\1\125\1\16\1\126\1\127\1\7\1\103\1\4"+
    "\1\130\1\0\1\6\6\7\1\40\1\131\1\132\1\4\1\133\4\0\1\134\1\135\1\56\1\6\1\136"+
    "\1\110\1\7\1\137\1\127\1\140\1\4\1\141\4\0\1\106\2\0\1\142\1\4\1\133\1\143"+
    "\1\144\1\7\1\6\3\7\1\21\1\6\1\7\1\145\2\7\1\6\3\7\1\21\1\146\7\0\6\7\1\131"+
    "\1\147\1\4\1\133\2\7\1\150\1\151\2\7\1\131\1\152\1\4\1\153\4\7\1\32\1\15\5"+
    "\7\1\154\51\7\1\112\1\16\1\112\5\7\1\112\4\7\1\112\1\16\1\112\1\7\1\16\7\7"+
    "\1\112\10\7\1\155\4\0\2\7\2\0\12\7\2\55\1\6\114\7\1\65\2\7\1\6\2\7\1\40\11"+
    "\7\1\111\1\7\1\106\1\7\1\25\1\156\1\0\2\7\1\156\1\0\2\7\1\157\1\0\1\7\1\25"+
    "\1\160\1\0\6\7\1\161\2\7\1\162\1\163\1\164\1\4\1\133\3\0\1\165\1\4\1\133\13"+
    "\7\1\0\5\7\1\40\10\7\1\55\1\0\3\7\1\16\1\7\1\157\1\7\1\54\1\103\1\4\3\7\1"+
    "\55\1\21\1\0\5\7\1\157\3\7\1\20\1\4\1\133\4\0\3\7\1\157\7\7\1\16\1\41\1\7"+
    "\1\166\1\167\1\4\1\133\1\4\1\133\1\73\1\0\1\23\1\170\10\0\6\7\1\61\1\7\1\61"+
    "\1\157\1\4\1\133\1\0\1\171\1\172\1\0\5\7\1\173\1\4\1\50\4\7\1\174\1\7\1\175"+
    "\1\0\6\7\1\176\1\0\1\4\1\177\1\4\1\50\3\7\1\55\1\7\1\106\10\0\1\200\2\23\1"+
    "\201\1\202\1\142\30\7\4\23\1\203\1\7\1\53\1\171\42\7\2\55\4\7\2\55\1\7\1\204"+
    "\3\7\1\55\6\7\1\25\1\127\1\205\1\21\1\206\1\157\1\7\1\21\1\205\1\21\5\0\1"+
    "\207\1\0\1\210\1\211\1\0\1\212\3\0\1\35\1\73\2\0\1\7\1\21\6\0\4\23\1\211\1"+
    "\0\1\213\1\124\1\125\1\214\1\22\1\215\1\7\1\216\1\217\1\220\2\0\5\7\1\106"+
    "\144\0\1\107\6\7\1\20\42\0\5\7\1\16\5\7\1\16\20\7\1\21\1\221\1\222\1\0\4\7"+
    "\1\32\1\15\7\7\1\73\1\0\1\210\2\7\1\16\1\0\10\16\4\7\5\0\1\73\72\0\1\217\3"+
    "\0\1\6\1\60\1\214\1\21\1\6\11\7\1\16\1\223\1\6\12\7\1\154\1\217\4\7\1\55\1"+
    "\6\12\7\1\16\2\0\3\7\1\40\6\0\170\7\1\55\11\0\72\7\1\55\5\0\21\7\1\21\10\0"+
    "\5\7\1\55\41\7\1\21\2\7\1\4\1\224\2\0\5\7\1\131\1\225\1\226\16\7\1\142\3\0"+
    "\1\73\1\7\1\124\14\7\1\66\3\7\1\16\1\7\7\0\1\73\1\7\1\227\1\230\3\7\3\0\6"+
    "\7\1\157\1\0\10\7\1\231\1\0\1\4\1\133\2\23\1\34\1\232\1\4\1\50\3\7\1\233\4"+
    "\7\1\234\1\0\3\7\1\21\6\7\1\230\1\7\1\211\1\73\1\4\1\133\1\62\1\7\1\4\1\235"+
    "\6\7\1\16\1\0\1\7\1\55\1\4\1\133\2\7\1\16\1\236\7\7\1\131\1\237\2\0\1\240"+
    "\2\7\1\241\1\0\3\242\1\0\2\16\5\7\1\154\1\55\1\0\17\7\1\243\1\4\1\133\64\7"+
    "\1\157\1\0\2\7\1\16\1\244\5\7\1\157\40\0\55\7\1\55\15\7\1\20\4\0\1\16\1\0"+
    "\1\244\1\217\1\7\1\67\1\16\1\127\1\245\15\7\1\20\3\0\1\244\54\7\1\55\2\0\10"+
    "\7\1\124\6\7\5\0\1\7\1\157\2\23\2\0\2\23\1\246\2\0\1\247\4\0\1\25\20\7\1\21"+
    "\2\0\1\4\1\133\1\6\2\7\1\250\1\6\2\7\1\40\1\107\12\7\1\16\3\124\1\251\4\0"+
    "\1\7\1\43\2\7\1\16\2\7\1\252\1\7\1\55\1\7\1\55\4\0\17\7\1\40\10\0\6\7\1\21"+
    "\20\0\1\253\20\0\3\7\1\21\6\7\1\106\1\0\1\211\3\0\4\7\2\0\3\7\1\40\5\7\1\40"+
    "\3\7\1\55\4\7\1\157\1\7\1\214\5\0\23\7\1\55\1\4\1\133\4\7\1\157\4\7\1\157"+
    "\5\7\1\0\6\7\1\157\23\0\46\7\1\16\1\0\2\7\1\55\1\0\1\7\23\0\1\55\1\67\4\7"+
    "\1\32\1\254\2\7\1\55\1\0\2\7\1\16\1\0\3\7\1\16\10\0\2\7\1\255\1\0\2\7\1\55"+
    "\1\0\3\7\1\20\10\0\7\7\1\107\10\0\1\256\1\56\1\43\1\6\2\7\1\157\1\257\4\0"+
    "\3\7\1\21\3\7\1\21\4\0\1\7\1\6\2\7\1\260\3\0\6\7\1\55\1\0\2\7\1\55\1\0\2\7"+
    "\1\40\1\0\2\7\1\20\15\0\11\7\1\106\6\0\6\7\1\40\1\0\6\7\1\40\41\0\10\7\1\261"+
    "\3\0\1\103\1\4\1\0\1\210\1\34\6\7\1\262\2\0\3\7\1\106\1\4\1\133\6\7\1\263"+
    "\1\4\2\0\4\7\1\264\1\0\10\7\1\265\1\266\1\4\1\267\4\0\2\7\1\31\3\7\1\270\1"+
    "\27\10\0\1\16\1\215\1\7\1\32\1\7\1\106\7\7\1\262\1\4\1\133\1\43\1\65\1\66"+
    "\2\7\1\67\1\104\1\71\1\65\1\101\1\116\1\217\1\271\2\272\21\0\10\7\1\227\1"+
    "\40\1\4\1\133\4\0\10\7\1\273\1\0\1\4\1\133\24\0\6\7\1\55\1\131\1\211\2\0\1"+
    "\55\4\0\7\7\1\131\1\274\1\0\1\4\1\133\4\0\6\7\1\176\1\0\1\4\1\133\6\0\3\7"+
    "\1\117\1\7\1\234\1\4\1\133\54\0\10\7\1\4\1\133\1\0\1\73\70\0\7\7\1\106\40"+
    "\0\1\7\1\67\4\7\1\16\1\131\1\106\1\0\1\4\1\133\2\0\1\124\3\7\1\124\2\7\1\6"+
    "\1\16\51\0\63\7\1\20\14\0\15\7\1\16\2\0\30\7\1\157\27\0\5\7\1\16\72\0\10\7"+
    "\1\16\67\0\7\7\1\106\3\7\1\16\1\4\1\133\14\0\3\7\1\55\1\272\1\0\6\7\1\16\1"+
    "\0\1\157\1\0\1\4\1\133\1\244\2\7\1\217\2\7\56\0\10\7\1\21\1\0\5\7\1\16\1\0"+
    "\1\210\1\275\1\7\10\0\1\106\3\0\75\7\1\21\2\0\36\7\1\40\41\0\1\20\77\0\15"+
    "\7\1\40\1\7\1\21\1\7\1\106\1\7\1\276\130\0\1\247\1\277\1\300\1\171\1\301\1"+
    "\172\3\0\1\302\22\0\1\266\67\0\12\7\1\25\10\7\1\25\1\303\1\304\1\7\1\305\1"+
    "\43\7\7\1\32\1\122\2\25\3\7\1\306\1\127\1\124\1\67\51\7\1\55\3\7\1\67\2\7"+
    "\1\154\3\7\1\154\2\7\1\25\3\7\1\25\2\7\1\16\3\7\1\16\3\7\1\67\3\7\1\67\2\7"+
    "\1\154\1\64\6\4\6\23\1\170\1\171\5\23\1\272\1\253\1\0\1\212\2\0\1\171\1\36"+
    "\1\23\52\0\1\16\2\7\1\66\1\245\1\40\72\0\30\7\1\21\1\0\1\170\5\0\10\7\1\307"+
    "\1\300\1\4\1\133\24\0\1\43\3\7\1\134\1\6\1\154\1\310\1\213\1\311\1\134\1\204"+
    "\1\134\2\154\1\102\1\7\1\31\1\7\1\157\1\75\1\31\1\7\1\157\116\0\3\7\1\20\3"+
    "\7\1\20\3\7\1\20\16\0\32\7\1\16\5\0\106\7\1\21\1\0\33\7\1\55\120\7\1\20\53"+
    "\0\3\7\1\55\134\0\36\23\2\0");

  /* The ZZ_CMAP_A table has 1616 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\23\1\2\1\1\1\5\1\3\2\0\1\4\1\0\1\13\4\0\1\14\3\0\1\20\1\25\1\20\2"+
    "\0\12\21\1\6\1\24\5\0\22\15\1\11\1\22\1\12\1\0\1\17\6\15\1\16\4\15\1\7\1\24"+
    "\1\10\7\0\1\1\4\0\1\15\12\0\1\15\2\0\7\15\1\0\2\15\4\0\4\15\6\0\5\15\7\0\1"+
    "\15\1\0\1\15\1\0\15\17\1\15\2\17\5\15\1\0\2\15\2\0\4\15\1\0\1\15\6\0\1\15"+
    "\1\0\3\15\1\0\1\15\1\0\4\15\1\0\13\15\1\0\3\15\1\0\7\17\6\15\1\0\1\15\7\0"+
    "\7\17\1\0\2\15\1\0\2\15\1\0\4\15\5\0\1\17\7\15\2\21\4\0\6\15\1\0\10\15\2\0"+
    "\1\17\1\15\1\0\3\17\3\15\2\21\3\15\2\0\1\15\3\17\2\0\3\15\2\21\11\15\11\17"+
    "\2\15\2\0\5\15\1\17\2\0\1\15\3\17\4\0\6\15\6\0\4\15\2\17\1\0\7\15\6\17\4\15"+
    "\1\17\10\15\1\17\3\15\4\17\7\15\2\0\2\21\5\15\2\0\2\15\2\0\6\15\1\0\7\15\1"+
    "\0\1\15\3\0\4\15\2\0\1\17\4\15\2\0\2\15\1\17\1\15\10\0\1\15\4\0\2\15\1\0\1"+
    "\15\1\0\3\15\1\0\6\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2\15\2\0\1\17\1\0\3\15"+
    "\2\0\2\15\1\17\3\0\4\15\1\0\1\15\7\0\2\21\1\15\1\0\2\15\1\0\5\15\1\0\2\15"+
    "\1\17\2\0\1\15\15\0\2\15\2\0\2\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0"+
    "\1\15\1\0\2\15\3\0\2\15\3\0\1\15\1\0\3\15\1\17\2\0\1\15\6\0\3\15\3\0\3\15"+
    "\5\0\2\15\2\0\2\15\5\0\3\15\2\0\4\15\1\0\3\15\1\17\1\15\3\0\12\15\1\0\1\15"+
    "\4\0\1\17\4\0\6\15\1\0\1\15\3\0\2\15\4\0\7\15\6\17\1\15\1\17\1\0\2\21\7\0"+
    "\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\3\0\3\15\1\0\1\15\1\0\3\15\1\0\3"+
    "\15\2\0\5\17\1\15\2\0\2\21\2\0\4\15\2\17\13\0\1\17\1\0\1\17\1\0\1\17\4\0\2"+
    "\17\2\15\3\17\1\0\2\17\6\0\1\17\1\0\1\15\2\17\10\15\2\17\4\15\5\17\2\15\6"+
    "\17\1\15\1\17\2\21\2\17\2\15\2\0\3\15\1\0\7\15\2\0\2\17\5\15\1\17\3\0\4\15"+
    "\4\0\1\15\1\0\2\15\4\0\4\15\2\17\3\15\13\17\3\0\1\15\4\0\1\15\1\17\5\0\3\17"+
    "\2\0\5\15\10\17\2\0\10\17\4\0\11\17\4\0\2\15\2\17\12\15\1\17\3\15\2\17\4\0"+
    "\6\15\2\17\2\21\3\0\3\15\3\17\1\0\5\17\4\15\1\17\6\15\1\17\2\15\1\0\7\17\1"+
    "\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\2\0\3\15\1\0\6\15\2\0\2\15\2\1\15"+
    "\0\2\17\13\0\1\17\5\0\1\15\4\0\1\15\1\0\5\15\2\0\1\15\1\0\4\15\1\0\3\15\2"+
    "\0\4\15\5\0\5\15\4\0\1\15\4\0\4\15\3\17\2\15\5\0\2\17\2\0\3\15\2\21\2\15\4"+
    "\0\3\17\1\0\10\15\2\17\1\0\3\15\1\17\3\15\1\17\4\15\1\17\10\15\1\17\1\15\5"+
    "\0\1\15\1\0\1\15\2\0\3\15\3\17\2\0\3\15\1\17\4\0\2\21\5\15\3\0\1\15\3\17\3"+
    "\15\1\17\1\15\10\0\3\15\4\0\4\15\1\17\2\0\6\15\1\0\3\15\1\0\2\17\5\0\7\15"+
    "\1\0\2\15\1\0\2\15\3\0\2\17\10\0\3\17\3\15\4\0\1\17\2\0\3\15\3\0\3\15\1\0"+
    "\2\15\1\0\1\15\5\0\1\17\2\0\1\15\3\0\1\15\2\0\4\15\1\0\2\15\2\0\4\15\1\0\2"+
    "\15\1\0\3\17\4\0\1\17\5\15\2\17\1\0\6\15\1\17\1\0\1\15\2\17\5\0\3\15\2\17"+
    "\1\0\2\21\3\15\1\17\2\0\1\15\1\0\1\17\4\15\5\0\3\17\3\0\2\21\1\15\1\0\1\15"+
    "\3\0\5\15\2\17\5\15\2\0\7\17\3\0\2\15\2\17\2\15\1\0\2\15\3\0\1\15\3\0\3\17"+
    "\7\15\3\0\1\17\1\15\1\0\2\17\3\0\6\17\5\0\3\17\2\0\3\17\2\0\4\17\4\0\1\15"+
    "\2\0\2\15\2\0\4\15\1\0\4\15\1\0\1\15\1\0\5\15\1\0\4\15\1\0\4\15\3\17\1\15"+
    "\1\0\1\15\1\0\1\15\5\0\1\15\1\0\1\15\1\0\3\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\5\1\11\1\3\1\12\2\13\1\12"+
    "\1\14\1\15\1\16\1\15\1\17\1\20\1\21\1\22"+
    "\2\11\2\23\1\1\1\24\1\0\1\25\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[39];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\156\0\204\0\232"+
    "\0\260\0\306\0\334\0\232\0\204\0\232\0\232\0\306"+
    "\0\232\0\306\0\362\0\232\0\306\0\u0108\0\u011e\0\u011e"+
    "\0\232\0\232\0\232\0\232\0\232\0\232\0\u0134\0\u014a"+
    "\0\u0160\0\u0176\0\u018c\0\232\0\u0134\0\232\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[39];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\7"+
    "\1\16\2\7\1\13\3\7\1\17\1\20\2\14\1\21"+
    "\2\10\1\11\1\12\1\22\1\14\7\21\1\12\4\21"+
    "\1\20\2\14\2\23\1\24\1\25\1\12\1\26\1\24"+
    "\4\23\1\27\2\23\1\26\3\23\1\30\1\25\2\24"+
    "\2\23\1\10\1\11\1\12\1\26\1\14\4\23\1\21"+
    "\2\23\1\26\3\23\1\17\1\20\2\14\1\21\1\0"+
    "\1\31\3\12\10\21\1\12\3\21\1\32\1\12\3\21"+
    "\1\0\1\31\3\12\1\33\1\21\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\21\2\43\1\21\1\12"+
    "\1\21\1\44\2\7\3\0\1\7\1\0\4\7\1\0"+
    "\6\7\34\0\1\10\3\12\10\0\1\12\4\0\1\12"+
    "\5\0\3\12\10\0\1\12\4\0\1\12\2\0\2\7"+
    "\1\0\2\12\1\13\1\0\4\7\1\0\2\7\1\13"+
    "\3\7\1\0\1\12\2\0\2\23\3\0\1\23\1\0"+
    "\4\23\1\0\6\23\4\0\2\23\1\0\2\12\1\26"+
    "\1\0\4\23\1\0\2\23\1\26\3\23\1\0\1\12"+
    "\15\0\1\24\12\0\13\45\1\46\12\45\14\47\1\46"+
    "\11\47\15\0\3\41\1\0\1\41\7\0\3\12\7\0"+
    "\1\41\1\42\1\41\1\0\1\41\1\0\1\12\23\0"+
    "\1\43\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\1\1\11\3\1\1\11\1\1\2\11\1\1"+
    "\1\11\2\1\1\11\4\1\6\11\5\1\1\11\1\0"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[39];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CasbinCSVLexer() {
    this((java.io.Reader)null);
  }
    private CasbinCSVValueSeparator myValueSeparator;
    private CasbinCSVEscapeCharacter myEscapeCharacter;

    private static final Pattern ESCAPE_TEXT_PATTERN = Pattern.compile("[,:;|\\t\\r\\n]");

    /**
     * Provide constructor that supports a Project as parameter.
     */
    _CasbinCSVLexer(java.io.Reader in, CasbinCSVValueSeparator valueSeparator, CasbinCSVEscapeCharacter escapeCharacter) {
      this(in);
      myValueSeparator = valueSeparator;
      myEscapeCharacter = escapeCharacter;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CasbinCSVLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CasbinCSVElementTypes.NUMBER;
            } 
            // fall through
          case 22: break;
          case 2: 
            { yybegin(UNESCAPED_TEXT);
    return CasbinCSVElementTypes.TEXT;
            } 
            // fall through
          case 23: break;
          case 3: 
            { yybegin(YYINITIAL);
    return CasbinCSVElementTypes.CRLF;
            } 
            // fall through
          case 24: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 25: break;
          case 5: 
            { if (myValueSeparator.isValueSeparator(yytext().toString())) {
        yybegin(YYINITIAL);
        return CasbinCSVElementTypes.COMMA;
    }
    if (yystate() != AFTER_TEXT) {
        yybegin(UNESCAPED_TEXT);
        return CasbinCSVElementTypes.TEXT;
    }
    return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 26: break;
          case 6: 
            { yybegin(JSON);
          return CasbinCSVElementTypes.BRACE1;
            } 
            // fall through
          case 27: break;
          case 7: 
            { yybegin(ESCAPED_TEXT);
    return CasbinCSVElementTypes.QUOTE;
            } 
            // fall through
          case 28: break;
          case 8: 
            { String text = yytext().toString();
    if (myEscapeCharacter.getCharacter().equals(text)) {
        return TokenType.BAD_CHARACTER;
    }
    yybegin(UNESCAPED_TEXT);
    return CasbinCSVElementTypes.TEXT;
            } 
            // fall through
          case 29: break;
          case 9: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 30: break;
          case 10: 
            { return CasbinCSVElementTypes.TEXT;
            } 
            // fall through
          case 31: break;
          case 11: 
            { String text = yytext().toString();
    if (myEscapeCharacter.isEscapedQuote(text)
        || ESCAPE_TEXT_PATTERN.matcher(text).matches()
     ) {
        return CasbinCSVElementTypes.ESCAPED_TEXT;
    }
    if (!text.startsWith(CasbinCSVEscapeCharacter.QUOTE.getCharacter())) {
        yypushback(1);
        return CasbinCSVElementTypes.TEXT;
    }

    return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 32: break;
          case 12: 
            { yybegin(AFTER_TEXT);
    return CasbinCSVElementTypes.QUOTE;
            } 
            // fall through
          case 33: break;
          case 13: 
            { String text = yytext().toString();
    if (myEscapeCharacter.getCharacter().equals(text)) {
        switch (yystate()) {
            case ESCAPED_TEXT:
                yybegin(ESCAPING);
                break;
            case ESCAPING:
                yybegin(ESCAPED_TEXT);
                break;
            default:
                throw new RuntimeException("unhandled state: " + yystate());
        }
        return CasbinCSVElementTypes.ESCAPED_TEXT;
    }
    return CasbinCSVElementTypes.TEXT;
            } 
            // fall through
          case 34: break;
          case 14: 
            { return CasbinCSVElementTypes.CRLF;
            } 
            // fall through
          case 35: break;
          case 15: 
            { return CasbinCSVElementTypes.COLON;
            } 
            // fall through
          case 36: break;
          case 16: 
            { yybegin(YYINITIAL);return CasbinCSVElementTypes.BRACE2;
            } 
            // fall through
          case 37: break;
          case 17: 
            { return CasbinCSVElementTypes.BRACK1;
            } 
            // fall through
          case 38: break;
          case 18: 
            { return CasbinCSVElementTypes.BRACK2;
            } 
            // fall through
          case 39: break;
          case 19: 
            { return CasbinCSVElementTypes.ID;
            } 
            // fall through
          case 40: break;
          case 20: 
            { return CasbinCSVElementTypes.COMMA;
            } 
            // fall through
          case 41: break;
          case 21: 
            { return CasbinCSVElementTypes.STRING;
            } 
            // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
