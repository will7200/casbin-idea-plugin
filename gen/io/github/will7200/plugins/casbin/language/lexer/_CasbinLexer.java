/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.github.will7200.plugins.casbin.language.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.github.will7200.plugins.casbin.language.psi.CasbinElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>CasbinLexer.flex</tt>
 */
public class _CasbinLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYHEADER = 2;
  public static final int YYQUOTES = 4;
  public static final int YYSINGLE_QUOTES = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\4\1\3\22\0\1\1\1\32\1\10\1\2\2\0\1\20\1\11\1\15\1\16\2\0\1"+
    "\14\1\0\1\17\1\0\12\6\1\0\1\2\1\0\1\13\3\0\10\5\1\40\4\5\1\41\1\36\1\37\12"+
    "\5\1\35\1\7\1\34\1\0\1\12\1\0\1\22\2\5\1\26\1\27\3\5\1\33\2\5\1\23\1\5\1\30"+
    "\1\24\7\5\1\25\1\5\1\31\1\5\1\0\1\21\10\0\1\4\32\0\1\1\337\0\1\1\177\0\13"+
    "\1\35\0\2\4\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\3\2\6"+
    "\1\16\1\6\1\17\1\20\1\6\4\21\1\22\1\1"+
    "\1\4\1\5\1\1\1\23\1\11\1\12\1\13\1\14"+
    "\1\15\4\1\1\16\1\1\1\2\1\4\1\5\1\2"+
    "\1\24\1\11\1\12\1\13\1\14\1\15\4\2\1\16"+
    "\1\2\1\25\1\26\1\27\2\6\1\30\1\6\2\21"+
    "\1\30\1\5\1\25\1\26\1\27\2\1\1\30\1\5"+
    "\1\25\1\26\1\27\2\2\1\30\3\6\2\21\2\1"+
    "\2\2\1\6\1\31\1\6\1\21\1\31\1\1\1\31"+
    "\1\2\1\31\4\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\210\0\210\0\u0110\0\210\0\210\0\210\0\210\0\u0132"+
    "\0\u0154\0\u0176\0\u0198\0\210\0\u01ba\0\210\0\210\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\210\0\u0286\0\u02a8\0\u02ca"+
    "\0\u02ec\0\210\0\u030e\0\u0286\0\u0286\0\u0286\0\u0286\0\u0330"+
    "\0\u0352\0\u0374\0\u0396\0\u0286\0\u03b8\0\u03da\0\u03fc\0\u041e"+
    "\0\u0440\0\210\0\u0462\0\u03da\0\u03da\0\u03da\0\u03da\0\u0484"+
    "\0\u04a6\0\u04c8\0\u04ea\0\u03da\0\u050c\0\210\0\210\0\210"+
    "\0\u052e\0\u0550\0\356\0\u0572\0\u0594\0\u05b6\0\u01fe\0\u05d8"+
    "\0\u0286\0\u0286\0\u0286\0\u05fa\0\u061c\0\u0286\0\u063e\0\u03da"+
    "\0\u03da\0\u03da\0\u0660\0\u0682\0\u03da\0\u06a4\0\u06c6\0\u06e8"+
    "\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\356"+
    "\0\u07f8\0\u081a\0\u01fe\0\u083c\0\u0286\0\u085e\0\u03da\0\356"+
    "\0\u01fe\0\u0286\0\u03da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\2\6\2\10\1\5\1\11\1\12"+
    "\1\10\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\3\10\1\23\3\10\1\24\1\25\1\26\1\27"+
    "\1\30\3\10\1\5\1\6\1\7\2\6\1\31\4\5"+
    "\1\31\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\32\3\31\1\33\3\31\1\24\1\34\1\35\1\5"+
    "\4\31\1\36\1\37\1\40\1\6\1\37\2\36\1\41"+
    "\1\42\2\36\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\3\36\1\53\3\36\1\54\1\55\6\36"+
    "\1\56\1\57\1\60\1\6\1\57\2\56\1\61\1\56"+
    "\1\62\1\56\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\3\56\1\73\3\56\1\74\1\75\6\56"+
    "\43\0\1\6\1\0\2\6\35\0\3\7\2\0\35\7"+
    "\5\0\2\10\3\0\1\10\7\0\10\10\1\0\1\10"+
    "\2\0\4\10\13\0\1\76\46\0\1\77\42\0\1\100"+
    "\25\0\2\10\3\0\1\10\7\0\1\10\1\101\6\10"+
    "\1\0\1\10\2\0\4\10\5\0\2\10\3\0\1\10"+
    "\7\0\5\10\1\102\2\10\1\0\1\10\2\0\4\10"+
    "\5\0\2\10\3\0\1\10\7\0\6\10\1\103\1\10"+
    "\1\0\1\10\2\0\4\10\5\0\2\10\3\0\1\10"+
    "\7\0\10\10\1\0\1\10\2\0\1\10\1\104\2\10"+
    "\5\0\1\31\4\0\1\31\7\0\10\31\1\0\1\31"+
    "\2\0\4\31\5\0\1\31\4\0\1\31\7\0\1\31"+
    "\1\105\6\31\1\0\1\31\2\0\4\31\5\0\1\31"+
    "\4\0\1\31\7\0\5\31\1\106\2\31\1\0\1\31"+
    "\2\0\4\31\5\0\1\31\4\0\1\31\7\0\6\31"+
    "\1\107\1\31\1\0\1\31\2\0\4\31\3\36\1\0"+
    "\3\36\1\41\1\0\32\36\1\37\1\36\1\6\1\37"+
    "\2\36\1\41\1\0\31\36\3\40\1\0\1\36\2\40"+
    "\1\110\1\7\31\40\7\36\1\41\35\36\1\0\3\36"+
    "\1\41\1\0\2\36\1\111\31\36\1\0\3\36\1\41"+
    "\1\0\7\36\1\112\24\36\1\0\3\36\1\41\1\0"+
    "\10\36\1\113\23\36\1\0\3\36\1\41\1\0\12\36"+
    "\1\114\21\36\1\0\3\36\1\41\1\0\16\36\1\115"+
    "\15\36\1\0\3\36\1\41\1\0\17\36\1\116\11\36"+
    "\3\56\1\0\3\56\1\61\1\56\1\0\31\56\1\57"+
    "\1\56\1\6\1\57\2\56\1\61\1\56\1\0\30\56"+
    "\3\60\1\0\1\56\2\60\1\117\1\60\1\7\30\60"+
    "\7\56\1\61\35\56\1\0\3\56\1\61\1\56\1\0"+
    "\1\56\1\120\31\56\1\0\3\56\1\61\1\56\1\0"+
    "\6\56\1\121\24\56\1\0\3\56\1\61\1\56\1\0"+
    "\7\56\1\122\23\56\1\0\3\56\1\61\1\56\1\0"+
    "\11\56\1\123\21\56\1\0\3\56\1\61\1\56\1\0"+
    "\15\56\1\124\15\56\1\0\3\56\1\61\1\56\1\0"+
    "\16\56\1\125\11\56\5\0\2\10\3\0\1\10\7\0"+
    "\1\10\1\126\6\10\1\0\1\10\2\0\4\10\5\0"+
    "\2\10\3\0\1\10\7\0\6\10\1\127\1\10\1\0"+
    "\1\10\2\0\4\10\5\0\2\10\3\0\1\130\7\0"+
    "\10\10\1\0\1\10\2\0\4\10\5\0\1\31\4\0"+
    "\1\31\7\0\1\31\1\131\6\31\1\0\1\31\2\0"+
    "\4\31\5\0\1\31\4\0\1\31\7\0\6\31\1\132"+
    "\1\31\1\0\1\31\2\0\4\31\3\40\2\36\2\40"+
    "\1\110\32\40\3\36\1\0\3\36\1\41\1\0\12\36"+
    "\1\133\21\36\1\0\3\36\1\41\1\0\17\36\1\134"+
    "\11\36\3\60\2\56\2\60\1\117\32\60\3\56\1\0"+
    "\3\56\1\61\1\56\1\0\11\56\1\135\21\56\1\0"+
    "\3\56\1\61\1\56\1\0\16\56\1\136\11\56\5\0"+
    "\2\10\3\0\1\10\7\0\2\10\1\137\5\10\1\0"+
    "\1\10\2\0\4\10\5\0\2\10\3\0\1\10\7\0"+
    "\7\10\1\140\1\0\1\10\2\0\4\10\5\0\2\10"+
    "\3\0\1\10\7\0\10\10\1\0\1\10\2\0\2\10"+
    "\1\141\1\10\5\0\1\31\4\0\1\31\7\0\2\31"+
    "\1\142\5\31\1\0\1\31\2\0\4\31\5\0\1\31"+
    "\4\0\1\31\7\0\7\31\1\143\1\0\1\31\2\0"+
    "\4\31\3\36\1\0\3\36\1\41\1\0\13\36\1\144"+
    "\20\36\1\0\3\36\1\41\1\0\20\36\1\145\10\36"+
    "\3\56\1\0\3\56\1\61\1\56\1\0\12\56\1\146"+
    "\20\56\1\0\3\56\1\61\1\56\1\0\17\56\1\147"+
    "\10\56\5\0\2\10\3\0\1\10\7\0\3\10\1\150"+
    "\4\10\1\0\1\10\2\0\4\10\5\0\2\10\3\0"+
    "\1\10\7\0\10\10\1\0\1\10\2\0\3\10\1\103"+
    "\5\0\1\31\4\0\1\31\7\0\3\31\1\151\4\31"+
    "\1\0\1\31\2\0\4\31\3\36\1\0\3\36\1\41"+
    "\1\0\14\36\1\152\14\36\3\56\1\0\3\56\1\61"+
    "\1\56\1\0\13\56\1\153\14\56";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\3\1\2\11\1\1\4\11\4\1"+
    "\1\11\1\1\2\11\5\1\1\11\4\1\1\11\17\1"+
    "\1\11\13\1\3\11\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int myPreviousState = YYINITIAL;
  public _CasbinLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CasbinLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return STRING;
            } 
            // fall through
          case 27: break;
          case 2: 
            { return STRING_SINGLE_QUOTE;
            } 
            // fall through
          case 28: break;
          case 3: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 29: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 30: break;
          case 5: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 31: break;
          case 6: 
            { return IDENTIFIER;
            } 
            // fall through
          case 32: break;
          case 7: 
            { yybegin(YYQUOTES);return OPEN_QUOTES;
            } 
            // fall through
          case 33: break;
          case 8: 
            { yybegin(YYSINGLE_QUOTES);return OPEN_SINGLE_QUOTES;
            } 
            // fall through
          case 34: break;
          case 9: 
            { return ASSIGN;
            } 
            // fall through
          case 35: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 36: break;
          case 11: 
            { return L_PARATHESIS;
            } 
            // fall through
          case 37: break;
          case 12: 
            { return R_PARATHESIS;
            } 
            // fall through
          case 38: break;
          case 13: 
            { return DOT;
            } 
            // fall through
          case 39: break;
          case 14: 
            { return OP_NOT;
            } 
            // fall through
          case 40: break;
          case 15: 
            { return R_BRACKET;
            } 
            // fall through
          case 41: break;
          case 16: 
            { yybegin(YYHEADER);return L_BRACKET;
            } 
            // fall through
          case 42: break;
          case 17: 
            { return SECTION_IDENTIFER;
            } 
            // fall through
          case 43: break;
          case 18: 
            { yybegin(YYINITIAL); return R_BRACKET;
            } 
            // fall through
          case 44: break;
          case 19: 
            { yybegin(YYINITIAL); return CLOSE_QUOTES;
            } 
            // fall through
          case 45: break;
          case 20: 
            { yybegin(YYINITIAL); return CLOSE_SINGLE_QUOTES;
            } 
            // fall through
          case 46: break;
          case 21: 
            { return OP_EQUALS;
            } 
            // fall through
          case 47: break;
          case 22: 
            { return OP_AND;
            } 
            // fall through
          case 48: break;
          case 23: 
            { return OP_OR;
            } 
            // fall through
          case 49: break;
          case 24: 
            { return OP_IN;
            } 
            // fall through
          case 50: break;
          case 25: 
            { return DENY;
            } 
            // fall through
          case 51: break;
          case 26: 
            { return ALLOW;
            } 
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
